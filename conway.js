/* Generated by Opal 0.7.0 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$new', '$times', '$move_to', '$*', '$line_to', '$columns', '$rows', '$stroke_style', '$stroke', '$private', '$floor', '$/', '$draw']);
  self.$require("helpers");
  (function($base) {
    var self = $module($base, 'Cell');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'Height', 25);

    Opal.cdecl($scope, 'Width', 50);

    Opal.cdecl($scope, 'StrokeColor', "#23eeee");
  })(self);
  (function($base, $super) {
    function $Grid(){};
    var self = $Grid = $klass($base, $super, 'Grid', $Grid);

    var def = self.$$proto, $scope = self.$$scope;

    def.context = nil;
    def.$initialize = function() {
      var self = this, canvas = nil;

      canvas = $scope.get('Canvas').$new($hash2(["id", "height", "width"], {"id": "conwayCanvas", "height": (($scope.get('Window')).$$scope.get('Height')), "width": (($scope.get('Window')).$$scope.get('Width'))}));
      return self.context = $scope.get('Context2D').$new($hash2(["canvas"], {"canvas": canvas}));
    };

    def.$draw = function() {
      var $a, $b, TMP_1, $c, TMP_2, self = this;

      ($a = ($b = self.$columns()).$times, $a.$$p = (TMP_1 = function(x){var self = TMP_1.$$s || this;
        if (self.context == null) self.context = nil;
if (x == null) x = nil;
      self.context.$move_to($hash2(["x", "y"], {"x": (($scope.get('Cell')).$$scope.get('Width'))['$*'](x), "y": 0}));
        return self.context.$line_to($hash2(["x", "y"], {"x": (($scope.get('Cell')).$$scope.get('Width'))['$*'](x), "y": (($scope.get('Window')).$$scope.get('Height'))}));}, TMP_1.$$s = self, TMP_1), $a).call($b);
      ($a = ($c = self.$rows()).$times, $a.$$p = (TMP_2 = function(y){var self = TMP_2.$$s || this;
        if (self.context == null) self.context = nil;
if (y == null) y = nil;
      self.context.$move_to($hash2(["x", "y"], {"x": 0, "y": (($scope.get('Cell')).$$scope.get('Width'))['$*'](y)}));
        return self.context.$line_to($hash2(["x", "y"], {"x": (($scope.get('Window')).$$scope.get('Width')), "y": (($scope.get('Cell')).$$scope.get('Width'))['$*'](y)}));}, TMP_2.$$s = self, TMP_2), $a).call($c);
      self.context.$stroke_style($hash2(["color"], {"color": (($scope.get('Cell')).$$scope.get('StrokeColor'))}));
      return self.context.$stroke();
    };

    self.$private();

    def.$columns = function() {
      var self = this;

      return ((($scope.get('Window')).$$scope.get('Width'))['$/']((($scope.get('Cell')).$$scope.get('Width')))).$floor();
    };

    return (def.$rows = function() {
      var self = this;

      return ((($scope.get('Window')).$$scope.get('Height'))['$/']((($scope.get('Cell')).$$scope.get('Height')))).$floor();
    }, nil) && 'rows';
  })(self, null);
  return $scope.get('Grid').$new().$draw();
})(Opal);
